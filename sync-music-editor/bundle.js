!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.scoreImages=function(e){return(0,r.default)("public/score-images.json",{music_id:e})},t.loadScoreImage=function(e,t){return(0,r.default)("/music/loadScoreImage",{music_id:e,file:t},"POST")},t.loadScoreData=function(e,t){return(0,r.default)("/music/loadScoreData",{music_id:e,file:t},"POST")},t.saveScoreData=function(e,t,n){return(0,r.default)("/music/SaveScoreData",{music_id:e,img_name:t,data_score:n},"POST")},t.mapDetail=function(e){return(0,r.default)("public/map-detail.json",{music_id:e})},t.loadMap=function(e,t){return(0,r.default)("/music/loadmap",{music_id:e,type:"images",file:t},"POST")},t.loadSummary=function(e,t){return(0,r.default)("/music/loadSummary",{music_id:e,type:"files",file:t},"POST")},t.summaryUpdate=function(e,t,n){return(0,r.default)("/music/SummaryUpdate",{music_id:e,map_id:t,summary:n},"POST")},t.detail=function(e){return(0,r.default)("/music/detail",{music_id:e})};var r=function(e){return e&&e.__esModule?e:{default:e}}(n(8))},function(e,t,n){"use strict";n(2);var r=a(n(7)),i=a(n(9)),o=a(n(10));function a(e){return e&&e.__esModule?e:{default:e}}!function(){new r.default({container:document.getElementById("music-score-container")}),new i.default({container:document.getElementById("music-spectrum-container")});var e=new o.default({container:document.getElementById("music-audio-container")});document.getElementById("btn-start").addEventListener("click",function(t){e.wavesurfer.playPause(),e.wavesurfer.isPlaying()?t.target.setAttribute("data-playing","true"):t.target.removeAttribute("data-playing")}),document.getElementById("btn-back").addEventListener("click",function(t){e.wavesurfer.play(0),document.getElementById("btn-start").setAttribute("data-playing","true")}),document.getElementById("btn-down").addEventListener("click",function(t){e.speed=e.speed>=3?.5:e.speed+.5,e.wavesurfer.setPlaybackRate(e.speed),document.getElementById("speed-label").innerHTML="x"+e.speed.toFixed(1)})}()},function(e,t,n){var r=n(3);"string"==typeof r&&(r=[[e.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(4)(!1)).push([e.i,'*{user-select:none;box-sizing:border-box}body,html{margin:0}#app,body,html{width:100%;height:100%}#app .tool{position:absolute;left:10px;top:60%;margin-top:-40px;z-index:1000;border:1px solid #ddd;background:#f1f1f1;border-radius:5px;padding:5px}#app .tool a{cursor:pointer;color:#000;position:relative}#app .tool a i{font-size:24px;pointer-events:none}#app .tool a #speed-label{pointer-events:none;position:absolute;top:-14px;left:0;transform:scale(.5)}#app .tool a#btn-start[data-playing] .icon-play:before{content:"\\E61E"}#app .tool a:hover{color:#333}#app #music-score{height:60%}#app #music-score #music-score-container{width:100%;height:100%}#app #music-spectrum{height:30%}#app #music-spectrum #music-spectrum-container{width:100%;height:100%}#app #music-audio{height:10%}#app #music-audio #music-audio-container{width:100%;height:100%}',""])},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),o=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(o).concat([i]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<e.length;i++){var a=e[i];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var r={},i=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),o=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),a=null,u=0,s=[],c=n(6);function l(e,t){for(var n=0;n<e.length;n++){var i=e[n],o=r[i.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](i.parts[a]);for(;a<i.parts.length;a++)o.parts.push(v(i.parts[a],t))}else{var u=[];for(a=0;a<i.parts.length;a++)u.push(v(i.parts[a],t));r[i.id]={id:i.id,refs:1,parts:u}}}}function f(e,t){for(var n=[],r={},i=0;i<e.length;i++){var o=e[i],a=t.base?o[0]+t.base:o[0],u={css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(u):n.push(r[a]={id:a,parts:[u]})}return n}function d(e,t){var n=o(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=s[s.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),s.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=o(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,i)}}function p(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=s.indexOf(e);t>=0&&s.splice(t,1)}function h(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),m(t,e.attrs),d(e,t),t}function m(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function v(e,t){var n,r,i,o;if(t.transform&&e.css){if(!(o=t.transform(e.css)))return function(){};e.css=o}if(t.singleton){var s=u++;n=a||(a=h(t)),r=g.bind(null,n,s,!1),i=g.bind(null,n,s,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",m(t,e.attrs),d(e,t),t}(t),r=function(e,t,n){var r=n.css,i=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||o)&&(r=c(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([r],{type:"text/css"}),u=e.href;e.href=URL.createObjectURL(a),u&&URL.revokeObjectURL(u)}.bind(null,n,t),i=function(){p(n),n.href&&URL.revokeObjectURL(n.href)}):(n=h(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){p(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return l(n,t),function(e){for(var i=[],o=0;o<n.length;o++){var a=n[o];(u=r[a.id]).refs--,i.push(u)}e&&l(f(e,t),t);for(o=0;o<i.length;o++){var u;if(0===(u=i[o]).refs){for(var s=0;s<u.parts.length;s++)u.parts[s]();delete r[u.id]}}}};var y=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function g(e,t,n,r){var i=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=y(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var i,o=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?e:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var n=t.container;this.swiper=new Swiper(n,{direction:"vertical"}),this.container=n.querySelector(".swiper-wrapper"),this.width=n.clientWidth,this.height=n.clientHeight,this.zr=[],this.init()}return r(e,[{key:"init",value:function(){this.setMusic(1)}},{key:"setMusic",value:function(e){var t=this;i.scoreImages(e).then(function(e){console.log("==score==",e),200===e.code&&e.data.map(function(e,n){var r=t.createPage(e,n);t.container.appendChild(r),t.swiper.update()})})}},{key:"zoomed",value:function(e){var t=d3.event.transform;e.position=[t.x,t.y],e.scale=[t.k,t.k],e.dirty()}},{key:"createPage",value:function(e,t){var n=this,r=document.createElement("div");r.className="swiper-slide",r.style.cssText="\n      width: "+this.width+"px;\n      height: "+this.height+"px;\n    ",this.zr[t]=zrender.init(r);var i=new zrender.Group;return this.zr[t].add(i),d3.select(r).call(d3.zoom().scaleExtent([1,10]).on("zoom",function(){n.zoomed(i,t)})),i.add(new zrender.Image({style:{image:e.img,x:(this.width-e.width/e.high*this.height)/2,y:0,width:e.width/e.high*this.height,height:this.height}})),r}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&u.return&&u.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.default=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"GET";"GET"===n&&(e+="?"+Object.entries(t).map(function(e){var t=r(e,2),n=t[0],i=t[1];return n+"="+i}).join("&"));var i={headers:{Accept:"application/json","Content-Type":"application/json"},method:n,credentials:"include",body:"POST"===n?JSON.stringify(t):void 0};return fetch(e,i).then(function(e){return e.json()})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));var o=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var r=t.container;this.container=r,this.width=r.clientWidth,this.height=r.clientHeight,this.zr=new zrender.init(r),this.g=new zrender.Group,this.zr.add(this.g),d3.select(this.container).call(d3.zoom().scaleExtent([1,10]).on("zoom",function(){n.zoomed()})),this.init()}return r(e,[{key:"zoomed",value:function(){var e=d3.event.transform;this.g.position=[e.x,e.y],this.g.scale=[e.k,e.k],this.g.dirty()}},{key:"init",value:function(){this.setMusic(1)}},{key:"setMusic",value:function(e){var t=this;i.mapDetail(e).then(function(e){console.log("==spectrum==",e),200===e.code&&t.createBg(e.data)})}},{key:"createBg",value:function(e){this.g.add(new zrender.Image({style:{image:e.img,x:0,y:0,width:e.width/e.high*this.height,height:this.height}}))}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var n=t.container;this.speed=1,this.wavesurfer=WaveSurfer.create({container:n,waveColor:"green",progressColor:"purple",height:64}),this.wavesurfer.on("ready",function(){console.log("[wavesurfer ready]")}),this.load("public/canon.mp3")}return r(e,[{key:"load",value:function(e){this.wavesurfer.load(e)}}]),e}();t.default=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,