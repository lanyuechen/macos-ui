!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}([function(e,t){e.exports=React},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var r={},o=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),i=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),a=null,l=0,u=[],c=n(9);function s(e,t){for(var n=0;n<e.length;n++){var o=e[n],i=r[o.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](o.parts[a]);for(;a<o.parts.length;a++)i.parts.push(y(o.parts[a],t))}else{var l=[];for(a=0;a<o.parts.length;a++)l.push(y(o.parts[a],t));r[o.id]={id:o.id,refs:1,parts:l}}}}function f(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(l):n.push(r[a]={id:a,parts:[l]})}return n}function d(e,t){var n=i(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function p(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function h(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),m(t,e.attrs),d(e,t),t}function m(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function y(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var u=l++;n=a||(a=h(t)),r=v.bind(null,n,u,!1),o=v.bind(null,n,u,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",m(t,e.attrs),d(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=c(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}.bind(null,n,t),o=function(){p(n),n.href&&URL.revokeObjectURL(n.href)}):(n=h(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){p(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return s(n,t),function(e){for(var o=[],i=0;i<n.length;i++){var a=n[i];(l=r[a.id]).refs--,o.push(l)}e&&s(f(e,t),t);for(i=0;i<o.length;i++){var l;if(0===(l=o[i]).refs){for(var u=0;u<l.parts.length;u++)l.parts[u]();delete r[l.id]}}}};var b=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function v(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=b(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=ReactDOM},function(e,t){e.exports=function(e){return"string"!=typeof e?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),/["'() \t\n]/.test(e)?'"'+e.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(t){var n=this,r=t.dom,o=t.onDrag,i=t.onDragEnd;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.dragStart=function(e){n.lx=e.pageX,n.ly=e.pageY,window.addEventListener("mousemove",n.drag),window.addEventListener("mouseup",n.dragEnd)},this.dragEnd=function(e){window.removeEventListener("mousemove",n.drag),window.removeEventListener("mouseup",n.dragEnd),n.cb(e,n.onDragEnd)},this.drag=function(e){n.cb(e,n.onDrag)},this.onDrag=o,this.onDragEnd=i,r.addEventListener("mousedown",this.dragStart)}return r(e,[{key:"cb",value:function(e,t){if(t){var n=e.pageX-this.lx,r=e.pageY-this.ly;this.lx=e.pageX,this.ly=e.pageY,t(n,r)}}}]),e}();t.default=o},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=u(o),a=u(n(3));n(7);var l=u(n(10));function u(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){return i.default.createElement("div",{style:{width:"100%",height:"100%"}},i.default.createElement(l.default,null))}}]),t}();a.default.render(i.default.createElement(c,null),document.getElementById("app"))},function(e,t,n){var r=n(8);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,"*{box-sizing:border-box;user-select:none;outline:none!important}body,html{margin:0}#app,body,html{width:100%;height:100%}",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=p(o);n(11);var a=p(n(14)),l=(p(n(17)),p(n(22))),u=p(n(26)),c=p(n(30)),s=p(n(33)),f=p(n(37)),d=p(n(38));function p(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"handleClick",value:function(e){"finder"===e.key?(0,u.default)({content:i.default.createElement(l.default,null)}):"launchpad"===e.key&&(0,s.default)({content:i.default.createElement(c.default,{data:f.default})})}},{key:"render",value:function(){return i.default.createElement("div",{className:"desktop"},i.default.createElement(d.default,{path:"/Users/lanyuechen/Desktop"}),!1,i.default.createElement("div",{className:"dock-container"},i.default.createElement(a.default,{data:f.default,onClick:this.handleClick})))}}]),t}();t.default=h},function(e,t,n){var r=n(12);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){var r=n(4);(e.exports=n(1)(!1)).push([e.i,".desktop{position:relative;width:100%;height:100%;background:url("+r(n(13))+") 50%;background-size:cover}.desktop .dock-container{position:absolute;bottom:0;left:0;width:100%;display:flex;justify-content:center}",""])},function(e,t,n){e.exports=n.p+"images/bg.jpg"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=function(e){return e&&e.__esModule?e:{default:e}}(o);n(15);var a=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"handleClick",value:function(e){this.props.onClick&&this.props.onClick(e)}},{key:"render",value:function(){var e=this,t=this.props.data;return i.default.createElement("div",{className:"dock"},i.default.createElement("ul",null,t.map(function(t){return i.default.createElement("li",{key:t.key},i.default.createElement("span",null,t.name),i.default.createElement("a",{onClick:function(){return e.handleClick(t)}},i.default.createElement("img",{src:"public/img/dock/"+t.key+".png"})))})))}}]),t}();t.default=a},function(e,t,n){var r=n(16);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".dock ul{list-style:none;margin:0;background:rgba(0,0,0,.5);border-radius:10px 10px 0 0;height:74px;padding:10px}.dock ul li{padding:0 5px;display:inline-block;position:relative}.dock ul li a{cursor:pointer}.dock ul li a img{width:50px;-webkit-box-reflect:below 2px -webkit-gradient(linear,left top,left bottom,from(transparent),color-stop(.7,transparent),to(hsla(0,0%,100%,.5)));transition:all .3s;transform-origin:50% 90%}.dock ul li span{pointer-events:none;display:none;position:absolute;bottom:100px;width:100%;background:rgba(0,0,0,.8);color:#fff;padding:4px 0;border-radius:5px;text-align:center;white-space:nowrap;font-size:12px}.dock ul li:hover span{display:block}.dock ul li:hover img{transform:scale(1.8);margin:0 20px}.dock ul li:hover+li a img{transform:scale(1.2);margin:0 15px}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=l(o),a=l(n(18));function l(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleStart=function(){n.world.start()},n.handleStop=function(){n.world.stop()},n.handleTick=function(){n.setState({times:n.state.times+1})},n.state={times:0},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"componentDidMount",value:function(){this.world=new a.default({width:600,height:400,speed:10,data:[[1,7],[1,8],[2,7],[2,8],[8,6],[8,7],[8,8],[9,5],[9,6],[9,8],[9,9],[10,5],[10,6],[10,8],[10,9],[11,5],[11,6],[11,7],[11,8],[11,9],[12,4],[12,5],[12,9],[12,10],[15,6],[15,7],[16,5],[16,6],[16,7],[16,8],[16,9],[17,5],[18,7],[18,8],[18,9],[19,9],[20,7],[20,8],[21,7],[21,8],[24,2],[24,3],[24,7],[24,8],[25,2],[25,4],[25,6],[25,8],[26,3],[26,4],[26,5],[26,6],[26,7],[27,4],[27,5],[27,6],[28,5],[35,5],[35,6],[36,5],[36,6]],onTick:this.handleTick}),this.world.start(),this.refs.container.appendChild(this.world.dom)}},{key:"render",value:function(){var e=this.state.times;return i.default.createElement("div",null,i.default.createElement("div",null,i.default.createElement("button",{onClick:this.handleStart},"start"),i.default.createElement("button",{onClick:this.handleStop},"stop"),i.default.createElement("span",null,"迭代次数: ",e)),i.default.createElement("div",{ref:"container"}))}}]),t}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(19)),i=a(n(20));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.width=t.width,this.height=t.height,this.grid=t.grid||10,this.speed=t.speed||1,this.onTick=t.onTick,this.transform={x:0,y:0,k:1},this.god=new i.default,this.god.addLives(t.data),this.init(),this.tick()}return r(e,[{key:"start",value:function(){var e=this;this.interval=setInterval(function(){e.tick()},1e3/this.speed)}},{key:"stop",value:function(){clearInterval(this.interval),this.interval=null}},{key:"init",value:function(){var e=this;this.dom=document.createElement("div"),this.dom.style.cssText="\n      width: "+this.width+"px;\n      height: "+this.height+"px;\n    ",this.zr=o.default.init(this.dom),this.container=new o.default.Group,this.bg=new o.default.Group,this.cells=new o.default.Group,this.container.add(this.bg),this.container.add(this.cells),this.zr.add(this.container),this.drawBg(),d3.select(this.dom).call(d3.zoom().scaleExtent([.1,10]).on("zoom",function(){e.zoomed()}))}},{key:"zoomed",value:function(){this.transform=d3.event.transform,this.container.position=[this.transform.x,this.transform.y],this.container.scale=[this.transform.k,this.transform.k],this.container.dirty(),this.drawBg()}},{key:"drawBg",value:function(){this.bg.removeAll();for(var e=this.grid*this.transform.k,t=Math.floor(8/e)+1,n=0;n<this.width/e;n+=t)for(var r=0;r<this.height/e;r+=t){var i=Math.floor(this.transform.x/e);this.bg.add(new o.default.Line({shape:{x1:(n-i)*this.grid,y1:-this.transform.y/this.transform.k,x2:(n-i)*this.grid,y2:(this.height-this.transform.y)/this.transform.k},style:{stroke:"#eee"}}));var a=Math.floor(this.transform.y/e);this.bg.add(new o.default.Line({shape:{x1:-this.transform.x/this.transform.k,y1:(r-a)*this.grid,x2:(this.width-this.transform.x)/this.transform.k,y2:(r-a)*this.grid},style:{stroke:"#eee"}}))}}},{key:"tick",value:function(){this.onTick&&this.onTick(),this.god.tick(),this.drawCells()}},{key:"drawCells",value:function(){var e=this;this.cells.removeAll(),this.god.cells.map(function(t){e.drawCell(t)})}},{key:"drawCell",value:function(e){var t=this.grid*this.transform.k;e.x*t+this.transform.x>this.width||e.x*t+this.transform.x<0||e.y*t+this.transform.y>this.height||e.y*t+this.transform.y<0||this.cells.add(new o.default.Rect({shape:{x:e.x*this.grid,y:e.y*this.grid,width:this.grid,height:this.grid},style:{fill:"#000"}}))}}]),e}();t.default=l},function(e,t){e.exports=zrender},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o,i=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=function(e){return e&&e.__esModule?e:{default:e}}(n(21));var u=(o=r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.cells=[]}return a(e,[{key:"tick",value:function(){var t=this,n={};this.cells.filter(function(e){return e.stage===l.default.ALIVE}).map(function(e){for(var t=-1;t<=1;t++)for(var r=-1;r<=1;r++){var o=e.x+t+","+(e.y+r);n[o]||(n[o]=0===t&&0===r?e:null)}}),Object.keys(n).map(function(r){var o=r.split(",").map(function(e){return parseInt(e)}),a=i(o,2),u=a[0],c=a[1],s=t.toBeOrNotToBe(u,c);n[r]||s!==e.LIVE||t.cells.push(new l.default(u,c)),n[r]&&s===e.DIE&&n[r].die()}),this.cells=this.cells.filter(function(e){if(e.stage!==l.default.AFTER_ALIVE)return e.alive(),!0})}},{key:"addLives",value:function(e){var t=this;Array.isArray(e)&&e.map(function(e){t.cells.push(new l.default(e[0],e[1]))})}},{key:"toBeOrNotToBe",value:function(t,n){var r=this.cells.filter(function(e){return e.stage!==l.default.PRE_ALIVE&&Math.abs(e.x-t)<=1&&Math.abs(e.y-n)<=1&&(e.x!==t||e.y!==n)}).length;return 3===r?e.LIVE:2===r?e.KEEP:e.DIE}}]),e}(),r.LIVE=1,r.DIE=-1,r.KEEP=0,o);t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var a=(o=r=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.x=t,this.y=n,this.stage=e.PRE_ALIVE}return i(e,[{key:"alive",value:function(){this.stage=e.ALIVE}},{key:"die",value:function(){this.stage=e.AFTER_ALIVE}}]),e}(),r.PRE_ALIVE=0,r.ALIVE=1,r.AFTER_ALIVE=2,o);t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=function(e){return e&&e.__esModule?e:{default:e}}(o);n(23);var a=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){return i.default.createElement("div",{className:"finder"},i.default.createElement("div",{className:"sidebar"},i.default.createElement("ul",{className:"menu"},i.default.createElement("li",null,i.default.createElement("span",null,"个人收藏"),i.default.createElement("ul",{className:"sub-menu"},i.default.createElement("li",{className:"active"},"应用程序"),i.default.createElement("li",null,"Documents"),i.default.createElement("li",null,"桌面"),i.default.createElement("li",null,"下载"),i.default.createElement("li",null,"最近使用"))))),i.default.createElement("div",{className:"finder-body"},i.default.createElement("ul",null,i.default.createElement("li",null,i.default.createElement("a",null,i.default.createElement("i",{className:"icon icon-game"}),"生命游戏")))))}}]),t}();t.default=a},function(e,t,n){var r=n(24);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){var r=n(4);(e.exports=n(1)(!1)).push([e.i,".finder{width:100%;height:100%;user-select:none}.finder .sidebar{width:150px;height:100%;float:left;background:#d6d6d6;padding:5px 0}.finder .sidebar .menu,.finder .sidebar .sub-menu{margin:0;padding:0;list-style:none}.finder .sidebar .menu{font-size:12px}.finder .sidebar .menu>li>span{padding-left:5px}.finder .sidebar .sub-menu{font-size:14px}.finder .sidebar .sub-menu li{height:24px;line-height:24px;padding-left:15px}.finder .sidebar .sub-menu li.active{background:#848d91}.finder .finder-body{overflow:hidden;height:100%}.finder .finder-body ul{margin:0;padding:0;list-style:none;font-size:12px;width:200px;height:100%;border-right:1px solid #d9d9d9}.finder .finder-body ul li{height:18px;line-height:18px}.finder .finder-body ul li a{display:block;padding-left:5px;cursor:pointer}.finder .finder-body ul li a i.icon{display:inline-block;width:12px;height:12px;margin-right:5px;position:relative}.finder .finder-body ul li a i.icon.icon-game{top:2px;background:url("+r(n(25))+");background-size:100%}",""])},function(e,t,n){e.exports=n.p+"images/game.png"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=document.createElement("div");function n(){o.default.unmountComponentAtNode(t)&&t.parentNode&&t.parentNode.removeChild(t),e.onCancel&&e.onCancel.apply(e,arguments)}return document.body.appendChild(t),o.default.render(r.default.createElement(i.default,{name:"Finder",onCancel:n},e.content),t),{destroy:n}};var r=a(n(0)),o=a(n(3)),i=a(n(27));function a(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o,i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=s(l);n(28);var c=s(n(5));function s(e){return e&&e.__esModule?e:{default:e}}var f=(o=r=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleCancel=function(){n.props.onCancel&&n.props.onCancel()},n.handleMin=function(){console.log("最小化")},n.handleMax=function(){n.resize({x:0,y:0,width:window.innerWidth,height:window.innerHeight})},n.rect={x:e.x,y:e.y,width:e.width,height:e.height},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.Component),a(t,[{key:"componentDidMount",value:function(){var e=this;new c.default({dom:this.refs["drag-handler"],onDrag:function(t,n){e.resize({x:e.rect.x+t,y:e.rect.y+n})}})}},{key:"resize",value:function(e){this.rect=i({},this.rect,e),this.refs.container.style.cssText="\n      left: "+this.rect.x+"px;\n      top: "+this.rect.y+"px;\n      width: "+this.rect.width+"px;\n      height: "+this.rect.height+"px;\n    "}},{key:"render",value:function(){var e=this.props,t=e.name,n=e.children,r=this.rect,o=r.x,i=r.y,a=r.width,l=r.height;return u.default.createElement("div",{className:"dialog"},u.default.createElement("div",{className:"dialog-container",ref:"container",style:{left:o,top:i,width:a,height:l}},u.default.createElement("div",{className:"dialog-header",ref:"drag-handler"},u.default.createElement("div",{className:"btns"},u.default.createElement("a",{onClick:this.handleCancel},u.default.createElement("svg",{x:"0px",y:"0px",width:"10px",height:"10px",viewBox:"0 -2 20 20"},u.default.createElement("polygon",{fill:"#4d0000",points:"15.9,5.2 14.8,4.1 10,8.9 5.2,4.1 4.1,5.2 8.9,10 4.1,14.8 5.2,15.9 10,11.1 14.8,15.9 15.9,14.8 11.1,10 "}))),u.default.createElement("a",{onClick:this.handleMin},u.default.createElement("svg",{x:"0px",y:"0px",width:"10px",height:"10px",viewBox:"0 -2 20 20"},u.default.createElement("rect",{fill:"#995700",x:"2.4",y:"9",width:"15.1",height:"2"}))),u.default.createElement("a",{onClick:this.handleMax},u.default.createElement("svg",{x:"0px",y:"0px",width:"10px",height:"10px",viewBox:"0 0 20 20"},u.default.createElement("path",{fill:"#006400",d:"M5.3,16H13L4,7v7.7C4.6,14.7,5.3,15.4,5.3,16z"}),u.default.createElement("path",{fill:"#006400",d:"M14.7,4H7l9,9V5.3C15.4,5.3,14.7,4.6,14.7,4z"})))),u.default.createElement("div",{className:"title"},t)),u.default.createElement("div",{className:"dialog-body"},n)))}}]),t}(),r.defaultProps={x:window.innerWidth/4,y:window.innerHeight/4,width:window.innerWidth/2,height:window.innerHeight/2},o);t.default=f},function(e,t,n){var r=n(29);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".dialog{position:fixed;width:100%;height:100%;left:0;top:0;pointer-events:none;user-select:none}.dialog .dialog-container{pointer-events:all;position:absolute;background:#ececec;border-radius:4px;box-shadow:0 0 1px rgba(0,0,0,.31),0 0 5px rgba(0,0,0,.18),0 8px 50px rgba(0,0,0,.3)}.dialog .dialog-container .dialog-header{position:relative;z-index:1;width:100%;display:flex;align-items:center;min-height:22px;background-image:-webkit-linear-gradient(top,#ededed,#ededed 1px,#e7e7e7 2px,#d1d1d1);border-bottom:1px solid #afafaf;border-top:1px solid #f6f6f6;border-radius:5px 5px 0 0;padding:0 3px}.dialog .dialog-container .dialog-header .btns{display:flex;width:61px}.dialog .dialog-container .dialog-header .btns a{width:12px;height:12px;border:1px solid #ffa12a;border-radius:50%;margin:1px 4px 0 5px;line-height:0;background:#ffbd2e}.dialog .dialog-container .dialog-header .btns a svg{width:10px;height:10px;opacity:0}.dialog .dialog-container .dialog-header .btns a:first-child{background:#ff5f57;border-color:#ff463f}.dialog .dialog-container .dialog-header .btns a:last-child{background:#28c940;border-color:#12ac28}.dialog .dialog-container .dialog-header .btns:hover a svg{opacity:1}.dialog .dialog-container .dialog-header .title{font-size:12px;color:#4d4d4d;flex-grow:1;flex-shrink:1;text-align:center;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;padding-right:60px}.dialog .dialog-container .dialog-body{border-radius:0 0 4px 4px;height:100%;padding-top:22px;position:absolute;top:0}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=function(e){return e&&e.__esModule?e:{default:e}}(o);n(31);var a=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleSearch=function(e){n.setState({search:e.target.value})},n.handleClick=function(e,t){console.log("=====handleClick=====",t)},n.state={search:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){var e=this,t=this.props.data,n=this.state.search;return i.default.createElement("div",{className:"launchpad"},i.default.createElement("div",{className:"search",onClick:function(e){e.stopPropagation(),e.preventDefault()}},i.default.createElement("div",{className:"search-container"},i.default.createElement("i",{className:"iconfont icon-search"}),i.default.createElement("input",{onChange:this.handleSearch,type:"text",placeholder:"搜索"}))),i.default.createElement("ul",null,t.filter(function(e){return!n||e.name.match(new RegExp(n,"i"))}).map(function(t){return i.default.createElement("li",{key:t.key},i.default.createElement("a",{onClick:function(n){return e.handleClick(n,t)}},i.default.createElement("img",{src:"public/img/dock/"+t.key+".png"})),i.default.createElement("span",null,t.name))})))}}]),t}();t.default=a},function(e,t,n){var r=n(32);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".launchpad .search{margin-top:25px;text-align:center}.launchpad .search .search-container{display:inline;position:relative}.launchpad .search .search-container i{position:absolute;top:6px;left:8px;font-size:12px;color:hsla(0,0%,100%,.8)}.launchpad .search .search-container input{background:hsla(0,0%,100%,.1);border:1px solid hsla(0,0%,100%,.3);color:hsla(0,0%,100%,.8);border-radius:2px;width:250px;height:25px;line-height:25px;text-indent:25px}.launchpad .search .search-container input::-webkit-input-placeholder{color:hsla(0,0%,100%,.8)}.launchpad .search .search-container input:focus{border-color:hsla(0,0%,100%,.5)}.launchpad ul{list-style:none;margin:0;padding:0}.launchpad ul li{position:relative;float:left;margin:20px}.launchpad ul li a{cursor:pointer}.launchpad ul li a img{width:64px}.launchpad ul li span{display:block;color:#fff;font-size:12px;text-align:center}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=document.createElement("div");function n(){document.getElementById("app").style.filter="none",o.default.unmountComponentAtNode(t)&&t.parentNode&&t.parentNode.removeChild(t),e.onCancel&&e.onCancel.apply(e,arguments)}return document.body.appendChild(t),document.getElementById("app").style.filter="blur(10px)",o.default.render(r.default.createElement(i.default,{onCancel:n},e.content),t),{destroy:n}};var r=a(n(0)),o=a(n(3)),i=a(n(34));function a(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=function(e){return e&&e.__esModule?e:{default:e}}(o);n(35);var a=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleCancel=function(){n.props.onCancel&&n.props.onCancel()},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){var e=this.props.children;return i.default.createElement("div",{className:"modal",onClick:this.handleCancel},i.default.createElement("div",{className:"modal-container"},e))}}]),t}();t.default=a},function(e,t,n){var r=n(36);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".modal{position:fixed;left:0;top:0;background:rgba(0,0,0,.5);padding:0 100px 100px}.modal,.modal .modal-container{width:100%;height:100%}",""])},function(e){e.exports=[{key:"finder",name:"Finder"},{key:"chrome",name:"Chrome"},{key:"launchpad",name:"Launchpad"},{key:"preference",name:"Preference"},{key:"itunes",name:"Itunes"},{key:"siri",name:"Siri"},{key:"app-store",name:"App Store"}]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),a=c(i);n(39);var l=c(n(41)),u=c(n(5));function c(e){return e&&e.__esModule?e:{default:e}}var s=100,f=5,d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.fsData=t.find(l.default,e.path),n.fsData=r({},n.fsData,{children:n.fsData.children.map(function(e,t){return r({},e,{x:Math.floor(t/f)*s,y:t%f*s})})}),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),o(t,null,[{key:"find",value:function(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"/";if(n===(r=(r+"/"+e.path).replace(/\/{2,}/,"/")))return e;if(e.children){var o=!0,i=!1,a=void 0;try{for(var l,u=e.children[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var c=l.value,s=t.find(c,n,r);if(s)return s}}catch(e){i=!0,a=e}finally{try{!o&&u.return&&u.return()}finally{if(i)throw a}}}}}]),o(t,[{key:"componentDidMount",value:function(){this.fsData.children.map(function(e){new u.default({dom:e.dom,onDrag:function(t,n){e.x=e.x+t,e.y=e.y+n,e.dom.style.cssText="\n            left: "+e.x+"px;\n            top: "+e.y+"px;\n          "}})})}},{key:"render",value:function(){var e=this.fsData.children;return a.default.createElement("div",{className:"fs"},e.map(function(t,n){return a.default.createElement("div",{className:"fs-item",key:n,ref:function(t){return e[n].dom=t},style:{left:t.x,top:t.y}},a.default.createElement("a",null,a.default.createElement("img",{src:t.icon||"public/img/icon/default.png"}),a.default.createElement("label",null,t.children?t.path:t.name)))}))}}]),t}();t.default=d},function(e,t,n){var r=n(40);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".fs{width:100%;height:100%;pointer-events:none;left:0;top:0}.fs,.fs .fs-item{position:absolute}.fs .fs-item{pointer-events:all;padding:15px}.fs .fs-item a{display:block}.fs .fs-item a img{width:60px;display:block;pointer-events:none}.fs .fs-item a label{color:#fff;display:block;margin-top:5px;width:100%;text-align:center;font-size:12px;text-shadow:1px 1px 2px rgba(0,0,0,.5)}",""])},function(e){e.exports={path:"/",children:[{path:"Users",children:[{path:"lanyuechen",children:[{path:"Desktop",children:[{name:"Chrome",icon:"public/img/icon/chrome.png"},{name:"test2"}]}]}]}]}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,