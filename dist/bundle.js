!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=9)}([function(e,t){e.exports=React},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var r={},o=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),i=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),a=null,l=0,u=[],s=n(12);function c(e,t){for(var n=0;n<e.length;n++){var o=e[n],i=r[o.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](o.parts[a]);for(;a<o.parts.length;a++)i.parts.push(v(o.parts[a],t))}else{var l=[];for(a=0;a<o.parts.length;a++)l.push(v(o.parts[a],t));r[o.id]={id:o.id,refs:1,parts:l}}}}function f(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(l):n.push(r[a]={id:a,parts:[l]})}return n}function d(e,t){var n=i(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function p(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function h(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),m(t,e.attrs),d(e,t),t}function m(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function v(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var u=l++;n=a||(a=h(t)),r=b.bind(null,n,u,!1),o=b.bind(null,n,u,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",m(t,e.attrs),d(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=s(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}.bind(null,n,t),o=function(){p(n),n.href&&URL.revokeObjectURL(n.href)}):(n=h(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){p(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return c(n,t),function(e){for(var o=[],i=0;i<n.length;i++){var a=n[i];(l=r[a.id]).refs--,o.push(l)}e&&c(f(e,t),t);for(i=0;i<o.length;i++){var l;if(0===(l=o[i]).refs){for(var u=0;u<l.parts.length;u++)l.parts[u]();delete r[l.id]}}}};var y=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function b(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=y(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t,n){"use strict";n.r(t);var r=n(4),o=n.n(r);for(var i in r)"default"!==i&&function(e){n.d(t,e,function(){return r[e]})}(i);t.default=o.a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={data:function(){return{msg:"Vue: Hello world!"}}}},function(e,t,n){var r=n(24);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";var r=function(){var e=this.$createElement;return(this._self._c||e)("div",{staticClass:"example"},[this._v(this._s(this.msg))])},o=[];n.d(t,"a",function(){return r}),n.d(t,"b",function(){return o})},function(e,t){e.exports=ReactDOM},function(e,t,n){"use strict";function r(e,t,n,r,o,i,a,l){var u,s="function"==typeof e?e.options:e;if(t&&(s.render=t,s.staticRenderFns=n,s._compiled=!0),r&&(s.functional=!0),i&&(s._scopeId="data-v-"+i),a?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),o&&o.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(a)},s._ssrRegister=u):o&&(u=l?function(){o.call(this,this.$root.$options.shadowRoot)}:o),u)if(s.functional){s._injectStyles=u;var c=s.render;s.render=function(e,t){return u.call(t),c(e,t)}}else{var f=s.beforeCreate;s.beforeCreate=f?[].concat(f,u):[u]}return{exports:e,options:s}}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=u(o),a=u(n(7));n(10);var l=u(n(13));function u(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){return i.default.createElement("div",{style:{width:"100%",height:"100%"}},i.default.createElement(l.default,null))}}]),t}();a.default.render(i.default.createElement(s,null),document.getElementById("app"))},function(e,t,n){var r=n(11);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,"*{box-sizing:border-box}body,html{margin:0}#app,body,html{width:100%;height:100%}",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=s(o);n(14);var a=s(n(18)),l=(s(n(21)),s(n(22)),s(n(25)),s(n(28))),u=s(n(33));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"handleClick",value:function(e){"finder"===e.key&&(0,u.default)({content:i.default.createElement("div",null,"dialog")})}},{key:"render",value:function(){return i.default.createElement("div",{className:"desktop"},i.default.createElement(l.default,null),i.default.createElement("div",{className:"dock-container"},i.default.createElement(a.default,{data:[{key:"finder",name:"Finder"},{key:"chrome",name:"Chrome"},{key:"launchpad",name:"Launchpad"},{key:"preference",name:"Preference"},{key:"itunes",name:"Itunes"},{key:"siri",name:"Siri"},{key:"app-store",name:"App Store"}],onClick:this.handleClick})))}}]),t}();t.default=c},function(e,t,n){var r=n(15);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){var r=n(16);(e.exports=n(1)(!1)).push([e.i,".desktop{position:relative;width:100%;height:100%;background:url("+r(n(17))+") 50%;background-size:cover}.desktop .dock-container{position:absolute;bottom:0;left:0;width:100%;display:flex;justify-content:center}",""])},function(e,t){e.exports=function(e){return"string"!=typeof e?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),/["'() \t\n]/.test(e)?'"'+e.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':e)}},function(e,t,n){e.exports=n.p+"4a2255cbd966a7da25fd1a7dab5904ee.jpg"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=function(e){return e&&e.__esModule?e:{default:e}}(o);n(19);var a=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"handleClick",value:function(e){this.props.onClick&&this.props.onClick(e)}},{key:"render",value:function(){var e=this,t=this.props.data;return i.default.createElement("div",{className:"dock"},i.default.createElement("ul",null,t.map(function(t){return i.default.createElement("li",{key:t.key},i.default.createElement("span",null,t.name),i.default.createElement("a",{onClick:function(){return e.handleClick(t)}},i.default.createElement("img",{src:"public/img/dock/"+t.key+".png"})))})))}}]),t}();t.default=a},function(e,t,n){var r=n(20);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".dock ul{list-style:none;margin:0;background:rgba(0,0,0,.5);border-radius:10px 10px 0 0;display:inline-block;height:74px;padding:10px}.dock ul li{padding:0 5px;display:inline-block;position:relative}.dock ul li a{cursor:pointer}.dock ul li a img{width:50px;-webkit-box-reflect:below 2px -webkit-gradient(linear,left top,left bottom,from(transparent),color-stop(.7,transparent),to(hsla(0,0%,100%,.5)));transition:all .3s;transform-origin:50% 90%}.dock ul li span{pointer-events:none;display:none;position:absolute;bottom:100px;width:100%;background:rgba(0,0,0,.8);color:#fff;padding:4px 0;border-radius:5px;text-align:center;white-space:nowrap;font-size:12px}.dock ul li:hover span{display:block}.dock ul li:hover img{transform:scale(1.8);margin:0 20px}.dock ul li:hover+li a img{transform:scale(1.2);margin:0 15px}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=function(e){return e&&e.__esModule?e:{default:e}}(o);var a=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"componentDidMount",value:function(){this.mountVue(this.refs.container,this.props.vue,this.props.data)}},{key:"mountVue",value:function(e,t,n){(new(Vue.extend({template:"<C />",data:n,components:{C:t}}))).$mount(e)}},{key:"render",value:function(){return i.default.createElement("div",{ref:"container"})}}]),t}();t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(6),o=n(3);for(var i in o)"default"!==i&&function(e){n.d(t,e,function(){return o[e]})}(i);n(23);var a=n(8),l=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);t.default=l.exports},function(e,t,n){"use strict";var r=n(5);n.n(r).a},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".example{color:red}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=function(e){return e&&e.__esModule?e:{default:e}}(o);n(26);var a=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){return i.default.createElement("div",{className:"demo-react"},"React: Hello world!!!")}}]),t}();t.default=a},function(e,t,n){var r=n(27);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".demo-react{color:blue}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=l(o),a=l(n(29));function l(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleStart=function(){n.world.start()},n.handleStop=function(){n.world.stop()},n.handleTick=function(){n.setState({times:n.state.times+1})},n.state={times:0},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"componentDidMount",value:function(){this.world=new a.default({width:600,height:400,speed:10,data:[[1,7],[1,8],[2,7],[2,8],[8,6],[8,7],[8,8],[9,5],[9,6],[9,8],[9,9],[10,5],[10,6],[10,8],[10,9],[11,5],[11,6],[11,7],[11,8],[11,9],[12,4],[12,5],[12,9],[12,10],[15,6],[15,7],[16,5],[16,6],[16,7],[16,8],[16,9],[17,5],[18,7],[18,8],[18,9],[19,9],[20,7],[20,8],[21,7],[21,8],[24,2],[24,3],[24,7],[24,8],[25,2],[25,4],[25,6],[25,8],[26,3],[26,4],[26,5],[26,6],[26,7],[27,4],[27,5],[27,6],[28,5],[35,5],[35,6],[36,5],[36,6]],onTick:this.handleTick}),this.world.start(),this.refs.container.appendChild(this.world.dom)}},{key:"render",value:function(){var e=this.state.times;return i.default.createElement("div",null,i.default.createElement("div",null,i.default.createElement("button",{onClick:this.handleStart},"start"),i.default.createElement("button",{onClick:this.handleStop},"stop"),i.default.createElement("span",null,"迭代次数: ",e)),i.default.createElement("div",{ref:"container"}))}}]),t}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(30)),i=a(n(31));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.width=t.width,this.height=t.height,this.grid=t.grid||10,this.speed=t.speed||1,this.onTick=t.onTick,this.transform={x:0,y:0,k:1},this.god=new i.default,this.god.addLives(t.data),this.init(),this.tick()}return r(e,[{key:"start",value:function(){var e=this;this.interval=setInterval(function(){e.tick()},1e3/this.speed)}},{key:"stop",value:function(){clearInterval(this.interval),this.interval=null}},{key:"init",value:function(){var e=this;this.dom=document.createElement("div"),this.dom.style.cssText="\n      width: "+this.width+"px;\n      height: "+this.height+"px;\n    ",this.zr=o.default.init(this.dom),this.container=new o.default.Group,this.bg=new o.default.Group,this.cells=new o.default.Group,this.container.add(this.bg),this.container.add(this.cells),this.zr.add(this.container),this.drawBg(),d3.select(this.dom).call(d3.zoom().scaleExtent([.1,10]).on("zoom",function(){e.zoomed()}))}},{key:"zoomed",value:function(){this.transform=d3.event.transform,this.container.position=[this.transform.x,this.transform.y],this.container.scale=[this.transform.k,this.transform.k],this.container.dirty(),this.drawBg()}},{key:"drawBg",value:function(){this.bg.removeAll();for(var e=this.grid*this.transform.k,t=Math.floor(8/e)+1,n=0;n<this.width/e;n+=t)for(var r=0;r<this.height/e;r+=t){var i=Math.floor(this.transform.x/e);this.bg.add(new o.default.Line({shape:{x1:(n-i)*this.grid,y1:-this.transform.y/this.transform.k,x2:(n-i)*this.grid,y2:(this.height-this.transform.y)/this.transform.k},style:{stroke:"#eee"}}));var a=Math.floor(this.transform.y/e);this.bg.add(new o.default.Line({shape:{x1:-this.transform.x/this.transform.k,y1:(r-a)*this.grid,x2:(this.width-this.transform.x)/this.transform.k,y2:(r-a)*this.grid},style:{stroke:"#eee"}}))}}},{key:"tick",value:function(){this.onTick&&this.onTick(),this.god.tick(),this.drawCells()}},{key:"drawCells",value:function(){var e=this;this.cells.removeAll(),this.god.cells.map(function(t){e.drawCell(t)})}},{key:"drawCell",value:function(e){var t=this.grid*this.transform.k;e.x*t+this.transform.x>this.width||e.x*t+this.transform.x<0||e.y*t+this.transform.y>this.height||e.y*t+this.transform.y<0||this.cells.add(new o.default.Rect({shape:{x:e.x*this.grid,y:e.y*this.grid,width:this.grid,height:this.grid},style:{fill:"#000"}}))}}]),e}();t.default=l},function(e,t){e.exports=zrender},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o,i=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=function(e){return e&&e.__esModule?e:{default:e}}(n(32));var u=(o=r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.cells=[]}return a(e,[{key:"tick",value:function(){var t=this,n={};this.cells.filter(function(e){return e.stage===l.default.ALIVE}).map(function(e){for(var t=-1;t<=1;t++)for(var r=-1;r<=1;r++){var o=e.x+t+","+(e.y+r);n[o]||(n[o]=0===t&&0===r?e:null)}}),Object.keys(n).map(function(r){var o=r.split(",").map(function(e){return parseInt(e)}),a=i(o,2),u=a[0],s=a[1],c=t.toBeOrNotToBe(u,s);n[r]||c!==e.LIVE||t.cells.push(new l.default(u,s)),n[r]&&c===e.DIE&&n[r].die()}),this.cells=this.cells.filter(function(e){if(e.stage!==l.default.AFTER_ALIVE)return e.alive(),!0})}},{key:"addLives",value:function(e){var t=this;Array.isArray(e)&&e.map(function(e){t.cells.push(new l.default(e[0],e[1]))})}},{key:"toBeOrNotToBe",value:function(t,n){var r=this.cells.filter(function(e){return e.stage!==l.default.PRE_ALIVE&&Math.abs(e.x-t)<=1&&Math.abs(e.y-n)<=1&&(e.x!==t||e.y!==n)}).length;return 3===r?e.LIVE:2===r?e.KEEP:e.DIE}}]),e}(),r.LIVE=1,r.DIE=-1,r.KEEP=0,o);t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var a=(o=r=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.x=t,this.y=n,this.stage=e.PRE_ALIVE}return i(e,[{key:"alive",value:function(){this.stage=e.ALIVE}},{key:"die",value:function(){this.stage=e.AFTER_ALIVE}}]),e}(),r.PRE_ALIVE=0,r.ALIVE=1,r.AFTER_ALIVE=2,o);t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),o=a(n(7)),i=a(n(34));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){var t=document.createElement("div");function n(){o.default.unmountComponentAtNode(t)&&t.parentNode&&t.parentNode.removeChild(t),e.onCancel&&e.onCancel.apply(e,arguments)}return document.body.appendChild(t),o.default.render(r.default.createElement(i.default,{name:"Finder",size:"md",onCancel:n},e.content),t),{destroy:n}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=function(e){return e&&e.__esModule?e:{default:e}}(o);n(35);var a=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleCancel=function(){n.props.onCancel&&n.props.onCancel()},n.handleMin=function(){n.props.onMin&&n.props.onMin()},n.handleMax=function(){n.props.onMax&&n.props.onMax()},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){var e=this.props,t=e.name,n=e.children,r=e.size;return i.default.createElement("div",{className:"modal"},i.default.createElement("div",{className:"modal-container modal-"+(r||"md")},i.default.createElement("div",{className:"modal-header"},i.default.createElement("div",{className:"btns"},i.default.createElement("a",{onClick:this.handleCancel},i.default.createElement("svg",{x:"0px",y:"0px",width:"10px",height:"10px",viewBox:"0 -2 20 20"},i.default.createElement("polygon",{fill:"#4d0000",points:"15.9,5.2 14.8,4.1 10,8.9 5.2,4.1 4.1,5.2 8.9,10 4.1,14.8 5.2,15.9 10,11.1 14.8,15.9 15.9,14.8 11.1,10 "}))),i.default.createElement("a",{onClick:this.handleMin},i.default.createElement("svg",{x:"0px",y:"0px",width:"10px",height:"10px",viewBox:"0 -2 20 20"},i.default.createElement("rect",{fill:"#995700",x:"2.4",y:"9",width:"15.1",height:"2"}))),i.default.createElement("a",{onClick:this.handleMax},i.default.createElement("svg",{x:"0px",y:"0px",width:"10px",height:"10px",viewBox:"0 0 20 20"},i.default.createElement("path",{fill:"#006400",d:"M5.3,16H13L4,7v7.7C4.6,14.7,5.3,15.4,5.3,16z"}),i.default.createElement("path",{fill:"#006400",d:"M14.7,4H7l9,9V5.3C15.4,5.3,14.7,4.6,14.7,4z"})))),i.default.createElement("div",{className:"title"},t)),i.default.createElement("div",{className:"modal-body"},n)))}}]),t}();t.default=a},function(e,t,n){var r=n(36);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".modal{position:fixed;width:100%;height:100%;left:0;top:0;display:flex;justify-content:center;align-items:center}.modal .modal-container{min-width:300px;min-height:200px;background:#ececec;border-radius:4px;box-shadow:0 0 1px rgba(0,0,0,.31),0 0 5px rgba(0,0,0,.18),0 8px 50px rgba(0,0,0,.3)}.modal .modal-container.modal-md{width:600px;height:400px}.modal .modal-container .modal-header{width:100%;display:flex;align-items:center;min-height:22px;background-image:-webkit-linear-gradient(top,#ededed,#ededed 1px,#e7e7e7 2px,#d1d1d1);border-bottom:1px solid #afafaf;border-top:1px solid #f6f6f6;border-radius:5px 5px 0 0;padding:0 3px}.modal .modal-container .modal-header .btns{display:flex;width:61px}.modal .modal-container .modal-header .btns a{width:12px;height:12px;border:1px solid #ffa12a;border-radius:50%;margin:1px 4px 0 5px;line-height:0;background:#ffbd2e}.modal .modal-container .modal-header .btns a svg{width:10px;height:10px;opacity:0}.modal .modal-container .modal-header .btns a:first-child{background:#ff5f57;border-color:#ff463f}.modal .modal-container .modal-header .btns a:last-child{background:#28c940;border-color:#12ac28}.modal .modal-container .modal-header .btns:hover a svg{opacity:1}.modal .modal-container .modal-header .title{font-size:12px;color:#4d4d4d;flex-grow:1;flex-shrink:1;text-align:center;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;padding-right:60px}.modal .modal-container .modal-body{padding:20px;border-radius:0 0 4px 4px}",""])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,